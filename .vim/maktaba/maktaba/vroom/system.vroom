Using vim's system() function is finicky at best. It gives you no way to
differentiate stderr from stdout. Depending upon what shell the user is using,
system calls might break completely. (For example, fish-shell is a
sh-incompatible shell that is growing in popularity). The maktaba#system
library abstracts away that pain.

Before we dive in, let's get maktaba installed:

  :set nocompatible
  :let g:maktabadir = fnamemodify($VROOMFILE, ':p:h:h')
  :let g:bootstrapfile = g:maktabadir . '/bootstrap.vim'
  :execute 'source' g:bootstrapfile

maktaba#system will always use 'sh' to execute system commands. Most plugins are
written assuming that your shell is sh-compatible, so this usually Just Works.
However, in some test frameworks (such as vroom) the shell is hijacked so that
shell commands may be verified and mocked. We need to explicitly inform maktaba
that the fake vroom shell is usable, otherwise it will ignore $SHELL and use
'sh' like it usually does.

  :call maktaba#system#SetUsableShellRegex('\v<shell\.vroomfaker$')

In our case, vroom has inserted a fake shell into the system environment that
will listen for system calls and replace them with test responses. The above
command lets maktaba#system know that vroom's fake shell is sh-compatible and
should be used (instead of defaulting to sh). This is the mechanism which allows
vroom to stub out system calls.



The most important function is maktaba#system#Call, which makes system calls in
a safe fashion. It returns a dictionary of output that you can use to
differentiate between stderr and stdout.

  :let g:out = maktaba#system#Call(['echo', 'hi'])
  ! echo hi 2> /tmp/* (glob)

Notice how your command is executed with stderr redirected to a temp file. This
is the mechanism by which maktaba#system#Call differentiates stdout and stderr
(something that vim's system() cannot do).

  :call maktaba#ensure#IsTrue(empty(g:out.stderr))
  :echomsg g:out.stdout
  ~ hi

This function converts non-zero status codes into ShellError exceptions:

  :let g:syscall = maktaba#function#Create('maktaba#system#Call')
  :call maktaba#error#Try(g:syscall.WithArgs('nothing'))
  ! nothing 2> /tmp/* (glob)
  $ 1 (status)
  ~ ERROR(ShellError): Error running: nothing

You can suppress error messages by passing in a 0 as maktaba#system#Call's third
argument (throw_errors):

  :let g:failcmd = '(echo failed >&2 && exit 1)'
  :let g:out = maktaba#system#Call(g:failcmd, 'hidden', 0)
  ! (echo failed >&2 && exit 1) 2> /tmp/* (glob)

This is sometimes necessary to capture stderr.

  :echomsg g:out.stderr
  ~ failed

In this case, the user is responsible for checking v:shell_error of their own
volition to determine whether an error has occurred:

  :echomsg v:shell_error
  ~ 1

(Ignore the second argument of maktaba#system#Call for now, we will encounter it
shortly.)



Normally you'll pass maktaba#system#Call a list of unescaped words and trust it
to do the escaping for you:

  :call maktaba#system#Call(['echo', '\n'])
  ! echo '\n' 2> /tmp/* (glob)

But you can also pass in a string that you've escaped yourself.

  :call maktaba#system#Call('echo \n')
  ! echo \n 2> /tmp/* (glob)



The maktaba#system#Command function gives access to the escaping machinery. It
combines lists of "words" into a command string.

  :echomsg maktaba#system#Command(['ls', 'path/to/something'])
  ~ ls path/to/something
  :echomsg maktaba#system#Command(['tail', '--lines=3', 'somefile'])
  ~ tail --lines=3 somefile
  :echomsg maktaba#system#Command(['echo', '-n', 'w3iR|) Th|ng'])
  ~ echo -n 'w3iR|) Th|ng'
  :echomsg maktaba#system#Command(['run.sh', 'foo:bar'])
  ~ run.sh foo:bar

You can also give it a command string that has already been escaped and joined,
in which case it's just returned:

  :echomsg maktaba#system#Command('ls somepath/* 2>&1')
  ~ ls somepath/* 2>&1




The second argument of maktaba#system#Call specifies the execution context of
the command. For example, the 'foreground' context echoes the output on the
screen as the command executes:

  :let g:out1 = maktaba#system#Call(['echo', 'hi'], 'foreground')
  ! echo hi
  $ hi

foreground_pause does the same thing, and then pauses for user input:

  :let g:out2 = maktaba#system#Call(['echo', 'hi'], 'foreground_pause')
  ! echo hi
  $ hi
  > <CR>

Foreground modes currently don't return stdout or stderr.

  :call maktaba#ensure#IsTrue(empty(g:out1) && empty(g:out2))

They still throw exceptions after non-zero exit statuses.

  :call maktaba#error#Try(g:syscall.WithArgs('nothing', 'foreground'))
  ! nothing
  $ 1 (status)
  ~ ERROR(ShellError): Error running: nothing



You can also use maktaba#system#CallAt to execute the command from a particular
directory.

  :call maktaba#system#CallAt(['echo', 'hi'], '..')
  ! cd .. && echo hi 2> /tmp/* (glob)

If you pass a file instead of a directory, the command will be executed in the
directory containing that file.

  :let g:tmpfile = tempname()
  :call writefile([], g:tmpfile)
  :let g:expected = 'Running command from ' . maktaba#path#Dirname(g:tmpfile)

  :let g:out = maktaba#system#CallAt(['echo', 'something'], g:tmpfile)
  ! cd (.*) && echo something 2> /tmp/.*
  $ Running command from \1

  :call maktaba#ensure#IsEqual(g:out.stdout, g:expected)



If the directory is missing, maktaba#system#CallAt raises a NotFound error.

  :let g:callat = maktaba#function#Create('maktaba#system#CallAt')
  :call maktaba#error#Try(g:callat.WithArgs('echo hi', '/does/not/exist'))
  ~ ERROR(NotFound): Directory /does/not/exist does not exist.



Another minor convenience is that you can use maktaba#system#And and
maktaba#system#Or to chain commands.

  :call maktaba#system#Call(
  |maktaba#system#And(['true', 'echo SUCCESS']), 'foreground')
  ! true && echo SUCCESS
  $ SUCCESS
  :call maktaba#system#Call(
  |maktaba#system#Or(['false', 'echo FAILURE']), 'foreground')
  ! false || echo FAILURE
  $ FAILURE
